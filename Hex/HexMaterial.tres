[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

const vec2 center = vec2(.5, .5);
const float radius = .5;
const float border_size = .1;

void fragment() {
	float height = tan(radians(60.0)) * .25 + .5;
	
	vec3 color = vec3(0.0);
	
	for (float i=0.0; i<6.0; i++) {
		float sine = sin(radians(60.0 * i));
		float cosine = cos(radians(60.0 * i));
		
		vec2 p = vec2(UV.x - .5, -(UV.y - .5));

		p = vec2(
			p.x * cosine - p.y * sine, 
			p.x * sine + p.y * cosine
		);
		
		p = vec2(p.x + .5, -p.y + .5);
		
		vec2 dif = p - vec2(0.5, 0.5);
		float angle = degrees(atan(dif.y, dif.x));
		
		if (angle >= 60.0 && angle <= 120.0 && p.y < height) {
			color = vec3(.5, .5, .5);
			float y_dif = height - p.y;
			if (y_dif <= border_size) {
				// find the light angle
				const vec2 light = vec2(.5, 0.);
				vec2 lp = vec2(UV.x, UV.y);
				
				vec2 ldif = lp - light;
				float langle = degrees(atan(ldif.x, ldif.y));
				float f = langle / 360.0;
				
				color *= vec3(ldif.x, 0.0, 0.0);
			}
			break;
		}
	}
	
	COLOR = vec4(color, 1.0);
}"

[resource]
shader = SubResource( 1 )
